const express = require('express')
const app = express()
const cors = require('cors')
const bodyParser = require('body-parser');
require('dotenv').config()

app.use(cors())
app.use(express.static('public'))
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/views/index.html')
});
app.use(bodyParser.urlencoded({ extended: false }));

const users = [];
const exerciseLogs = {};

function generateUserId() {
  return (Math.random() * 1000000).toFixed(0);
}

// Routes

// Create a new user
app.post('/api/users', (req, res) => {
  const { username } = req.body;
  const userId = generateUserId();
  const newUser = {
    username,
    _id: userId,
  };
  users.push(newUser);
  exerciseLogs[userId] = [];
  res.json(newUser);
});

// Get a list of all users
app.get('/api/users', (req, res) => {
  res.json(users);
});

// Add an exercise to a user's log
app.post('/api/users/:_id/exercises', (req, res) => {
  const { description, duration, date } = req.body;
  const userId = req.params._id;
  const newExercise = {
    description,
    duration: parseInt(duration),
    date: date ? new Date(date).toDateString() : new Date().toDateString(),
  };
  exerciseLogs[userId].push(newExercise);

  const user = users.find(user => user._id === userId);
  if (!user) {
    res.status(404).json({ error: 'User not found' });
    return;
  }

  const response = {
    ...user,
    ...newExercise,
  };

  res.json(response);
});



// Get a user's exercise log
app.get('/api/users/:_id/logs', (req, res) => {
  const userId = req.params._id;
  const { from, to, limit } = req.query;
  let log = exerciseLogs[userId];

  // Filter by date range if 'from' and 'to' parameters are provided
  if (from || to) {
    log = log.filter(exercise => {
      const exerciseDate = new Date(exercise.date);
      if (from && exerciseDate < new Date(from)) return false;
      if (to && exerciseDate > new Date(to)) return false;
      return true;
    });
  }

  // Limit the number of logs if 'limit' parameter is provided
  if (limit) {
    log = log.slice(0, parseInt(limit));
  }

  res.json({
    ...users.find(user => user._id === userId),
    ...{ count: log.length },
    log,
  });
});

const listener = app.listen(process.env.PORT || 3000, () => {
  console.log('Your app is listening on port ' + listener.address().port)
})
